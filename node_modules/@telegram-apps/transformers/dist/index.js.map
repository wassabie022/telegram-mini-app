{"version":3,"file":"index.js","sources":["../../toolkit/dist/index.js","../src/errors/errors.ts","../src/parseBySchema.ts","../src/toRecord.ts","../src/transformers/createTransformerGen.ts","../src/transformers/object.ts","../src/errors/throwUnexpectedValue.ts","../src/transformers/boolean.ts","../src/transformers/string.ts","../src/transformers/number.ts","../src/transformers/date.ts","../src/transformers/searchParams.ts","../src/complex/initData.ts","../src/validators/isRGB.ts","../src/validators/isRGBShort.ts","../src/toRGB.ts","../src/transformers/rgb.ts","../src/complex/theme-params.ts","../src/complex/launch-params.ts","../src/complex/miniAppsMessage.ts","../src/transformers/array.ts","../src/transformers/fn.ts","../src/validators/isRecord.ts"],"sourcesContent":["var k = Object.defineProperty;\nvar I = (r, e, t) => e in r ? k(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;\nvar E = (r, e, t) => I(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass d extends Error {\n  constructor(e, t, n) {\n    super(\n      typeof t == \"object\" ? t.message : t || e,\n      {\n        cause: typeof t == \"object\" ? t.cause : n\n      }\n    ), this.type = e, Object.setPrototypeOf(this, d.prototype);\n  }\n}\nfunction x(r, e, t) {\n  return r.addEventListener(e, t), () => r.removeEventListener(e, t);\n}\nfunction _(...r) {\n  const e = r.flat(1);\n  return [\n    e.push.bind(e),\n    () => {\n      e.forEach((t) => {\n        t();\n      });\n    }\n  ];\n}\nfunction F(r, e) {\n  return r instanceof d && r.type === e;\n}\nfunction m(r) {\n  return (e) => F(e, r);\n}\nconst R = \"ERR_ABORTED\", $ = \"ERR_CANCELED\", S = \"ERR_TIMED_OUT\";\nfunction C(r) {\n  return new d(R, { cause: r });\n}\nconst U = m(S), V = m(R), B = m($);\nfunction T(r, e) {\n  return r.reject = e.reject, r;\n}\nclass i extends Promise {\n  constructor(t, n) {\n    let o, s;\n    typeof t == \"function\" ? (o = t, s = n) : s = t;\n    let u, c;\n    super((a, h) => {\n      s || (s = {});\n      const { abortSignal: l } = s;\n      if (l && l.aborted)\n        return h(C(l.reason));\n      const [y, A] = _(), b = (f) => (...L) => (A(), f(...L)), w = new AbortController(), { signal: D } = w;\n      c = b((f) => {\n        w.abort(f), h(f);\n      }), u = b(a), l && y(\n        x(l, \"abort\", () => {\n          c(C(l.reason));\n        })\n      );\n      const { timeout: g } = s;\n      if (g) {\n        const f = setTimeout(() => {\n          c(new d(S, `Timeout reached: ${g}ms`));\n        }, g);\n        y(() => {\n          clearTimeout(f);\n        });\n      }\n      o && o(u, c, D);\n    });\n    /**\n     * Rejects the promise.\n     */\n    E(this, \"reject\");\n    this.reject = c;\n  }\n  /**\n   * Creates a new BetterPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, n) {\n    return new i((o, s, u) => {\n      try {\n        const c = t(u);\n        return c instanceof Promise ? c.then(o, s) : o(c);\n      } catch (c) {\n        s(c);\n      }\n    }, n);\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new i((n) => {\n      n(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new i((n, o) => {\n      o(t);\n    });\n  }\n  /**\n   * Cancels the promise execution.\n   */\n  cancel() {\n    this.reject(new d($));\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return T(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, n) {\n    return T(super.then(t, n), this);\n  }\n}\nfunction v(r, e) {\n  return r.resolve = e.resolve, r;\n}\nclass p extends i {\n  constructor(t, n) {\n    let o, s;\n    typeof t == \"function\" ? (o = t, s = n) : s = t;\n    let u;\n    super((c, a, h) => {\n      u = c, o && o(c, a, h);\n    }, s);\n    /**\n     * Resolves the promise.\n     */\n    E(this, \"resolve\");\n    this.resolve = u;\n  }\n  /**\n   * Creates a new EnhancedPromise instance using executor, resolving promise when a result\n   * was returned.\n   * @param fn - function returning promise result.\n   * @param options - additional options.\n   */\n  static withFn(t, n) {\n    return new p(\n      (o, s, u) => i.withFn(t, { abortSignal: u }).then(o, s),\n      n\n    );\n  }\n  /**\n   * @see Promise.resolve\n   */\n  static resolve(t) {\n    return new p((n) => {\n      n(t);\n    });\n  }\n  /**\n   * @see Promise.reject\n   */\n  static reject(t) {\n    return new p((n, o) => {\n      o(t);\n    });\n  }\n  /**\n   * @see Promise.catch\n   */\n  catch(t) {\n    return this.then(void 0, t);\n  }\n  /**\n   * @see Promise.finally\n   */\n  finally(t) {\n    return v(super.finally(t), this);\n  }\n  /**\n   * @see Promise.then\n   */\n  then(t, n) {\n    return v(super.then(t, n), this);\n  }\n}\nfunction Z(r, e) {\n  return new i((t) => {\n    setTimeout(t, r);\n  }, { abortSignal: e });\n}\nfunction j(r) {\n  return `tapps/${r}`;\n}\nfunction J(r, e) {\n  sessionStorage.setItem(j(r), JSON.stringify(e));\n}\nfunction K(r) {\n  const e = sessionStorage.getItem(j(r));\n  try {\n    return e ? JSON.parse(e) : void 0;\n  } catch {\n  }\n}\nfunction M(r) {\n  return r.replace(/[A-Z]/g, (e) => `-${e.toLowerCase()}`);\n}\nfunction z(r) {\n  return r.replace(/[A-Z]/g, (e) => `_${e.toLowerCase()}`);\n}\nfunction G(r) {\n  return r.replace(/_[a-z]/g, (e) => e[1].toUpperCase());\n}\n// @__NO_SIDE_EFFECTS__\nfunction q(r, e) {\n  e || (e = {});\n  const {\n    textColor: t,\n    bgColor: n,\n    shouldLog: o = !0\n  } = e;\n  function s(u, ...c) {\n    if (!o || typeof o == \"function\" && !o())\n      return;\n    const a = \"font-weight:bold;padding:0 5px;border-radius:5px\";\n    console[u](\n      `%c${Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(/* @__PURE__ */ new Date())}%c / %c${r}`,\n      `${a};background-color: lightblue;color:black`,\n      \"\",\n      `${a};${t ? `color:${t};` : \"\"}${n ? `background-color:${n}` : \"\"}`,\n      ...c\n    );\n  }\n  return [\n    function(...c) {\n      s(\"log\", ...c);\n    },\n    function(...c) {\n      s(\"error\", ...c);\n    }\n  ];\n}\nfunction H(r, e) {\n  document.documentElement.style.setProperty(r, e);\n}\nfunction P(r) {\n  document.documentElement.style.removeProperty(r);\n}\nexport {\n  i as CancelablePromise,\n  R as ERR_ABORTED,\n  $ as ERR_CANCELED,\n  S as ERR_TIMED_OUT,\n  p as EnhancedPromise,\n  d as TypedError,\n  x as addEventListener,\n  M as camelToKebab,\n  z as camelToSnake,\n  C as createAbortError,\n  _ as createCbCollector,\n  q as createLogger,\n  m as createTypedErrorPredicate,\n  P as deleteCssVar,\n  K as getStorageValue,\n  V as isAbortError,\n  B as isCanceledError,\n  F as isErrorOfType,\n  U as isTimeoutError,\n  H as setCssVar,\n  J as setStorageValue,\n  Z as sleep,\n  G as snakeToCamel\n};\n//# sourceMappingURL=index.js.map\n","export const ERR_INVALID_VALUE = 'ERR_INVALID_VALUE';\nexport const ERR_UNEXPECTED_VALUE = 'ERR_UNEXPECTED_VALUE';\nexport const ERR_UNEXPECTED_TYPE = 'ERR_UNEXPECTED_TYPE';\nexport const ERR_PARSE = 'ERR_PARSE';\n","import { TypedError } from '@telegram-apps/toolkit';\n\nimport { ERR_PARSE } from './errors/errors.js';\nimport type { TransformFn, Schema } from './types.js';\n\n/**\n * Parses external value by specified schema. Functions iterates over each schema field\n * and uses getField function to get its value from the external source.\n * @param schema - object schema.\n * @param getField - function which gets external value by its field name.\n */\nexport function parseBySchema<T>(\n  schema: Schema<T>,\n  getField: (field: string) => unknown,\n): T {\n  const result = {} as T;\n\n  for (const field in schema) {\n    const definition = schema[field];\n    if (!definition) {\n      continue;\n    }\n\n    let from: string;\n    let transform: TransformFn<any>;\n\n    if (typeof definition === 'function') {\n      from = field;\n      transform = definition;\n    } else {\n      [from, transform] = definition;\n    }\n\n    try {\n      const parsedValue = transform(getField(from));\n      if (parsedValue !== undefined) {\n        (result as any)[field] = parsedValue;\n      }\n    } catch (cause) {\n      throw new TypedError(\n        ERR_PARSE,\n        `Parser for \"${field}\" property failed${from === field ? '' : `. Source field: \"${from}\"`}`,\n        cause\n      );\n    }\n  }\n\n  return result;\n}\n","import { TypedError } from '@telegram-apps/toolkit';\n\nimport { ERR_INVALID_VALUE, ERR_UNEXPECTED_VALUE } from '@/errors/errors.js';\n\n/**\n * Converts value to a record.\n * @param value - value to convert.\n * @throws {TypedError} ERR_INVALID_VALUE\n * @throws {TypedError} ERR_UNEXPECTED_VALUE\n */\nexport function toRecord(value: unknown): Record<string, unknown> {\n  let formattedValue: any = value;\n\n  // Convert value to JSON in case, it is string. We expect value to be JSON string.\n  if (typeof formattedValue === 'string') {\n    try {\n      formattedValue = JSON.parse(formattedValue);\n    } catch (cause) {\n      throw new TypedError(ERR_INVALID_VALUE, { cause });\n    }\n  }\n\n  // We expect json to be a usual object.\n  if (\n    typeof formattedValue !== 'object'\n    || !formattedValue\n    || Array.isArray(formattedValue)\n  ) {\n    throw new TypedError(ERR_UNEXPECTED_VALUE);\n  }\n\n  return formattedValue as Record<string, unknown>;\n}\n","import {TypedError} from '@telegram-apps/toolkit';\n\nimport { ERR_PARSE } from '@/errors/errors.js';\nimport type { Transformer, TransformerGen, TransformFn } from '@/types.js';\n\n/**\n * Creates transformer generator using the passed transform function as a base.\n * @param transform - transform function.\n * @param name - custom transformer name.\n */\nexport function createTransformerGen<T>(\n  name: string,\n  transform: TransformFn<T>\n): TransformerGen<T> {\n  return (optional?) => {\n    const parse = ((value: unknown) => {\n      if (optional && value === undefined) {\n        return;\n      }\n\n      try {\n        return transform(value);\n      } catch (cause) {\n        throw new TypedError(ERR_PARSE, {\n          message: `\"${name}\" transformer failed to parse the value`,\n          cause,\n        });\n      }\n    }) as TransformFn<T>;\n\n    return /* #__PURE__ */ Object.assign(\n      parse,\n      {\n        isValid(value: unknown): value is T {\n          try {\n            parse(value);\n            return true;\n          } catch {\n            return false;\n          }\n        }\n      }\n    ) satisfies Transformer<T>\n  };\n}\n","import { parseBySchema } from '@/parseBySchema.js';\nimport { toRecord } from '@/toRecord.js';\nimport type { TransformerGen, Schema } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport function object<T>(schema: Schema<T>, name?: string): TransformerGen<T> {\n  return createTransformerGen(name || 'object', v => {\n    const record = toRecord(v);\n    return parseBySchema(schema, f => record[f]);\n  });\n}\n","import { TypedError } from '@telegram-apps/toolkit';\n\nimport { ERR_UNEXPECTED_TYPE } from './errors.js';\n\nexport function throwUnexpectedValue(value: unknown): never {\n  throw new TypedError(ERR_UNEXPECTED_TYPE, `Unexpected value received: ${JSON.stringify(value)}`);\n}","import { throwUnexpectedValue } from '@/errors/throwUnexpectedValue.js';\nimport type { TransformerGen } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport const boolean: TransformerGen<boolean> = createTransformerGen('boolean', v => {\n  if (typeof v === 'boolean') {\n    return v;\n  }\n  const str = String(v);\n  if (str === '1' || str === 'true') {\n    return true;\n  }\n  if (str === '0' || str === 'false') {\n    return false;\n  }\n  throwUnexpectedValue(v);\n});\n","import { throwUnexpectedValue } from '@/errors/throwUnexpectedValue.js';\nimport type { TransformerGen } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport const string: TransformerGen<string> = createTransformerGen('string', v => {\n  if (typeof v === 'string' || typeof v === 'number') {\n    return v.toString();\n  }\n  throwUnexpectedValue(v);\n});\n","import { throwUnexpectedValue } from '@/errors/throwUnexpectedValue.js';\nimport type { TransformerGen } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport const number: TransformerGen<number> = createTransformerGen('number', v => {\n  if (typeof v === 'number') {\n    return v;\n  }\n  if (typeof v === 'string') {\n    const num = Number(v);\n    if (!Number.isNaN(num)) {\n      return num;\n    }\n  }\n  throwUnexpectedValue(v);\n});\n","import type { TransformerGen } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\nimport { number } from './number.js';\n\nexport const date: TransformerGen<Date> = createTransformerGen('date', v => (\n  v instanceof Date ? v : new Date(number()(v) * 1000)\n));\n","import { throwUnexpectedValue } from '@/errors/throwUnexpectedValue.js';\nimport { parseBySchema } from '@/parseBySchema.js';\nimport type { Schema, TransformerGen } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport function searchParams<T>(schema: Schema<T>, name?: string): TransformerGen<T> {\n  return createTransformerGen(name || 'searchParams', v => {\n    if (typeof v !== 'string' && !(v instanceof URLSearchParams)) {\n      throwUnexpectedValue(v);\n    }\n\n    const params = typeof v === 'string' ? new URLSearchParams(v) : v;\n\n    return parseBySchema(schema, (field) => {\n      const paramValue = params.get(field);\n      return paramValue === null ? undefined : paramValue;\n    });\n  });\n}\n","import { camelToSnake } from '@telegram-apps/toolkit';\nimport type { Chat, InitData, User } from '@telegram-apps/types';\n\nimport type { Schema, TransformerGen, TransformFn } from '@/types.js';\n\nimport { object } from '@/transformers/object.js';\nimport { boolean as createBoolean } from '@/transformers/boolean.js';\nimport { string as createString } from '@/transformers/string.js';\nimport { number as createNumber } from '@/transformers/number.js';\nimport { date } from '@/transformers/date.js';\nimport { searchParams } from '@/transformers/searchParams.js';\n\nfunction toSnakeCaseSource<T>(schema: { [K in keyof T]: TransformFn<T[K]> }): Schema<T> {\n  for (const key in schema) {\n    (schema as any)[key] = [camelToSnake(key), schema[key]];\n  }\n  return schema;\n}\n\nexport const initData: TransformerGen<InitData> = (optional) => {\n  const number = createNumber();\n  const numberOptional = createNumber(true);\n  const string = createString();\n  const stringOptional = createString(true);\n  const boolOptional = createBoolean(true);\n\n  const user = object<User>(toSnakeCaseSource({\n    addedToAttachmentMenu: boolOptional,\n    allowsWriteToPm: boolOptional,\n    firstName: string,\n    id: number,\n    isBot: boolOptional,\n    isPremium: boolOptional,\n    languageCode: stringOptional,\n    lastName: stringOptional,\n    photoUrl: stringOptional,\n    username: stringOptional,\n  }), 'User')(true);\n\n  return searchParams<InitData>(\n    toSnakeCaseSource({\n      authDate: date(),\n      canSendAfter: numberOptional,\n      chat: object<Chat>(\n        toSnakeCaseSource({\n          id: number,\n          type: string,\n          title: string,\n          photoUrl: stringOptional,\n          username: stringOptional,\n        }),\n        'Chat',\n      )(true),\n      chatInstance: stringOptional,\n      chatType: stringOptional,\n      hash: string,\n      queryId: stringOptional,\n      receiver: user,\n      startParam: stringOptional,\n      user,\n    }),\n    'initData',\n  )(optional);\n}\n\nexport type { InitData };\n","import type { RGB } from '@telegram-apps/types';\n\n/**\n * Returns true in case, passed value has #RRGGBB format.\n * @param value - value to check.\n */\nexport function isRGB(value: string): value is RGB {\n  return /^#[\\da-f]{6}$/i.test(value);\n}\n","import type { RGBShort } from '@telegram-apps/types';\n\n/**\n * Returns true in case, passed value has #RGB format.\n * @param value - value to check.\n */\nexport function isRGBShort(value: string): value is RGBShort {\n  return /^#[\\da-f]{3}$/i.test(value);\n}\n","import type { RGB } from '@telegram-apps/types';\n\nimport { isRGB } from './validators/isRGB.js';\nimport { isRGBShort } from './validators/isRGBShort.js';\n\n/**\n * Converts passed value to #RRGGBB format. Accepts following color formats:\n * - `#RGB`\n * - `#RRGGBB`\n * - `rgb(1,2,3)`\n * - `rgba(1,2,3,4)`\n * @param value - value to convert.\n * @throws {Error} Passed value does not satisfy any of known RGB formats.\n */\nexport function toRGB(value: string): RGB {\n  // Remove all spaces.\n  const clean = value.replace(/\\s/g, '').toLowerCase();\n\n  // Value already has required format.\n  if (isRGB(clean)) {\n    return clean;\n  }\n\n  // Convert from #RGB.\n  if (isRGBShort(clean)) {\n    let color: RGB = '#';\n    for (let i = 0; i < 3; i += 1) {\n      color += clean[1 + i].repeat(2);\n    }\n    return color;\n  }\n\n  // Example valid values: rgb(0,3,10) rgba(32,114,8,0)\n  const match = clean.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/)\n    || clean.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n\n  // In case, this didn't work as well, we can't extract RGB color from passed\n  // text.\n  if (!match) {\n    throw new Error(`Value \"${value}\" does not satisfy any of known RGB formats.`);\n  }\n\n  // Otherwise, take R, G and B components, convert to hex and create #RRGGBB\n  // string.\n  return match.slice(1).reduce((acc, component) => {\n    const formatted = parseInt(component, 10).toString(16);\n    return acc + (formatted.length === 1 ? '0' : '') + formatted;\n  }, '#') as RGB;\n}\n","import type { RGB } from '@telegram-apps/types';\n\nimport { toRGB } from '@/toRGB.js';\nimport type { TransformerGen } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nimport { string } from './string.js';\n\nexport const rgb: TransformerGen<RGB> = createTransformerGen('rgb', v => toRGB(string()(v)));\n","import { camelToSnake, snakeToCamel } from '@telegram-apps/toolkit';\nimport type { ThemeParams } from '@telegram-apps/types';\n\nimport { toRecord } from '@/toRecord.js';\nimport { rgb } from '@/transformers/rgb.js';\nimport { createTransformerGen } from '@/transformers/createTransformerGen.js';\nimport type { TransformerGen } from '@/types.js';\n\nexport const themeParams: TransformerGen<ThemeParams> = createTransformerGen(\n  'themeParams',\n  value => {\n    const rgbOptional = rgb(true);\n\n    return Object\n      .entries(toRecord(value))\n      .reduce<ThemeParams>((acc, [k, v]) => {\n        acc[snakeToCamel(k)] = rgbOptional(v);\n        return acc;\n      }, {});\n  },\n);\n\n/**\n * Serializes theme parameters to representation sent from the Telegram application.\n */\n// #__NO_SIDE_EFFECTS__\nexport function serializeThemeParams(themeParams: ThemeParams): string {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object\n        .entries(themeParams)\n        .map(([key, value]) => [camelToSnake(key), value]),\n    ),\n  );\n}\n\nexport type { ThemeParams };","import type { LaunchParams } from '@telegram-apps/types';\n\nimport { searchParams } from '@/transformers/searchParams.js';\nimport { boolean as createBoolean } from '@/transformers/boolean.js';\nimport { string as createString } from '@/transformers/string.js';\n\nimport { serializeThemeParams, themeParams } from './theme-params.js';\nimport { initData } from './initData.js';\nimport type { TransformerGen } from '@/types.js';\n\nexport const launchParams: TransformerGen<LaunchParams> = (optional) => {\n  const string = createString();\n  const stringOptional = createString(true);\n  const boolOptional = createBoolean(true);\n\n  return searchParams<LaunchParams>({\n    botInline: ['tgWebAppBotInline', boolOptional],\n    initData: ['tgWebAppData', initData(true)],\n    initDataRaw: ['tgWebAppData', stringOptional],\n    platform: ['tgWebAppPlatform', string],\n    showSettings: ['tgWebAppShowSettings', boolOptional],\n    startParam: ['tgWebAppStartParam', stringOptional],\n    themeParams: ['tgWebAppThemeParams', themeParams()],\n    version: ['tgWebAppVersion', string],\n  }, 'launchParams')(optional);\n};\n\n/**\n * Serializes launch parameters to representation sent from the Telegram application.\n */\n// #__NO_SIDE_EFFECTS__\nexport function serializeLaunchParams(lp: LaunchParams): string {\n  const { initDataRaw, startParam, showSettings, botInline } = lp;\n\n  const params = new URLSearchParams();\n\n  params.set('tgWebAppPlatform', lp.platform);\n  params.set('tgWebAppThemeParams', serializeThemeParams(lp.themeParams));\n  params.set('tgWebAppVersion', lp.version);\n  initDataRaw && params.set('tgWebAppData', initDataRaw);\n  startParam && params.set('tgWebAppStartParam', startParam);\n  typeof showSettings === 'boolean' && params.set('tgWebAppShowSettings', showSettings ? '1' : '0');\n  typeof botInline === 'boolean' && params.set('tgWebAppBotInline', botInline ? '1' : '0');\n\n  return params.toString();\n}\n\nexport type { LaunchParams };","import { object } from '@/transformers/object.js';\nimport { string } from '@/transformers/string.js';\n\nexport interface MiniAppsMessage {\n  eventType: string;\n  eventData?: unknown;\n}\n\nexport const miniAppsMessage = object<MiniAppsMessage>({\n  eventType: string(),\n  eventData: v => v,\n}, 'miniAppsMessage');\n","import { throwUnexpectedValue } from '@/errors/throwUnexpectedValue.js';\nimport type { TransformerGen, TransformFn } from '@/types.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport function array<T>(of: TransformFn<T>, name?: string): TransformerGen<T[]> {\n  return createTransformerGen(name || 'array', v => {\n    let a: unknown[] | undefined;\n\n    if (Array.isArray(v)) {\n      a = v;\n    } else if (typeof v === 'string') {\n      try {\n        const json = JSON.parse(v);\n        if (Array.isArray(json)) {\n          a = json;\n        }\n      } catch {\n      }\n    }\n    if (!a) {\n      throwUnexpectedValue(v);\n    }\n    return a.map(of);\n  });\n}\n","import { throwUnexpectedValue } from '@/errors/throwUnexpectedValue.js';\n\nimport { createTransformerGen } from './createTransformerGen.js';\n\nexport const fn = createTransformerGen<(...args: unknown[]) => unknown>('fn', (v) => {\n  if (typeof v === 'function') {\n    return v as (...args: unknown[]) => unknown;\n  }\n  throwUnexpectedValue(v);\n});","/**\n * States that passed value is Record and not Array.\n * @param value - value to check.\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && typeof value === 'object' && !Array.isArray(value);\n}\n"],"names":["d","t","n","z","r","G","ERR_INVALID_VALUE","ERR_UNEXPECTED_VALUE","ERR_UNEXPECTED_TYPE","ERR_PARSE","parseBySchema","schema","getField","result","field","definition","from","transform","parsedValue","cause","TypedError","toRecord","value","formattedValue","createTransformerGen","name","optional","parse","object","v","record","f","throwUnexpectedValue","boolean","str","string","number","num","date","searchParams","params","paramValue","toSnakeCaseSource","key","camelToSnake","initData","createNumber","numberOptional","createString","stringOptional","boolOptional","createBoolean","user","isRGB","isRGBShort","toRGB","clean","color","i","match","acc","component","formatted","rgb","themeParams","rgbOptional","k","snakeToCamel","serializeThemeParams","launchParams","serializeLaunchParams","lp","initDataRaw","startParam","showSettings","botInline","miniAppsMessage","array","of","json","fn","isRecord"],"mappings":"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"}